"""
Django settings for api_server project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# 환경변수 파일 가져오기 위한 셋팅
env = environ.Env(
    DEBUG = (bool, True)
)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# ----- 장고에서 쓸 환경변수 여기에 등록하기
SECRET_KEY = env('SECRET_KEY')
API_KEY = env('API_KEY')
EMAIL_PASSWORD= env('EMAIL_PASSWORD')
# --------------------------


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-_&*z&&)jlar)$6)h=hymaq-j*35#cit(yse-zy(ppk@p1@3vhv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # App
    'accounts',
    'articles',
    'products',
    'banks',
    'subscribe',
    
    #Rest API
    'rest_framework',

    #REST_AUTH
    'rest_framework.authtoken',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'django.contrib.sites',
    'allauth.socialaccount',
    'dj_rest_auth.registration',

    
    #CORS
    'corsheaders',
    
    # Django-cleanup : Media파일 삭제시 자동으로 삭제
    'django_cleanup.apps.CleanupConfig',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

#SNS 계정통한 인증 셋팅
SITE_ID = 1

#이메일 인증 해제 
ACCOUNT_EMAIL_VERIFICATION = 'none'
#이메일 요구
ACCOUNT_EMAIL_REQUIRED = True 
#Username 필드 사용 해제
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # 유저 username 필드 사용 X
ACCOUNT_USERNAME_REQUIRED = False        # 유저 username 필드 사용 X
ACCOUNT_AUTHENTICATION_METHOD = 'email'

REST_FRAMEWORK = {
    # Authentication
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    # permission
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', #CORS 셋팅
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', #Dj-Rest-Auth , Registration 기능 추가
]

#Vue 사이트 로컬 허용
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:5173',
    'http://localhost:5173',
]


ROOT_URLCONF = 'api_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#Media 설정 
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = 'media/'

#커스텀 유저 모델
AUTH_USER_MODEL = 'accounts.User'

REST_AUTH = {
    'LOGIN_SERIALIZER': 'accounts.serializers.CustomLoginSerializer',
    'TOKEN_SERIALIZER': 'accounts.serializers.CustomTokenSerializer',
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.CustomUserDetailsSerializer',
}

#static파일 정보 추가저장 
STATICFILES_DIRS = [
    BASE_DIR/'static',
]


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'yeeunju1318@gmail.com'
EMAIL_HOST_PASSWORD = EMAIL_PASSWORD
